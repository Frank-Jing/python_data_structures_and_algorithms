
# Linked list vs. Array
Advantages over arrays
1. Dynamic size
2. Ease of insertion/deletion

Drawbacks:
1. Random access is not allowed. We have to access elements sequentially starting from the first node. So we cannot do binary search with linked lists efficiently with its default implementation. Read about it here.
2. Extra memory space for a pointer is required with each element of the list.
3. Not cache friendly. Since array elements are contiguous locations, there is locality of reference which is not there in case of linked lists.

# Creation
```python

# A simple Python program for traversal of a linked list 
  
# Node class 
class Node: 
  
    # Function to initialise the node object 
    def __init__(self, data): 
        self.data = data  # Assign data 
        self.next = None  # Initialize next as null 
  
  
# Linked List class contains a Node object 
class LinkedList: 
  
    # Function to initialize head 
    def __init__(self): 
        self.head = None
  
    # This function prints contents of linked list 
    # starting from head 
    def printList(self): 
        temp = self.head 
        while (temp): 
            print (temp.data) 
            temp = temp.next
  
  
# Code execution starts here 
if __name__=='__main__': 
  
    # Start with the empty list 
    llist = LinkedList() 
  
    llist.head = Node(1) 
    second = Node(2) 
    third = Node(3) 
  
    llist.head.next = second; # Link first node with second 
    second.next = third; # Link second node with the third node 
  
    llist.printList() 
```

# Insert
## Add a node at the front
```python
# This function is in LinkedList class 
# Function to insert a new node at the beginning 
def push(self, new_data): 
  
    # 1 & 2: Allocate the Node & 
    #        Put in the data 
    new_node = Node(new_data) 
          
    # 3. Make next of new Node as head 
    new_node.next = self.head 
          
    # 4. Move the head to point to new Node  
    self.head = new_node 
```

## Add a node after a given node
```python
# This function is in LinkedList class. 
# Inserts a new node after the given prev_node. This method is 
# defined inside LinkedList class shown above */ 
def insertAfter(self, prev_node, new_data): 

	# 1. check if the given prev_node exists 
	if prev_node is None: 
		print "The given previous node must in LinkedList."
		return

	# 2. Create new node & 
	# 3. Put in the data 
	new_node = Node(new_data) 

	# 4. Make next of new Node as next of prev_node 
	new_node.next = prev_node.next

	# 5. make next of prev_node as new_node 
	prev_node.next = new_node
```

## Add a node at the end

Time complexity of append is O(n) where n is the number of nodes in linked list. Since there is a loop from head to end, the function does O(n) work.
```python
# This function is defined in Linked List class 
# Appends a new node at the end. This method is 
# defined inside LinkedList class shown above */ 
def append(self, new_data): 

# 1. Create a new node 
# 2. Put in the data 
# 3. Set next as None 
new_node = Node(new_data) 

# 4. If the Linked List is empty, then make the 
# new node as head 
if self.head is None: 
		self.head = new_node 
		return

# 5. Else traverse till the last node 
last = self.head 
while (last.next): 
	last = last.next

# 6. Change the next of last node 
last.next = new_node 
```

This method can also be optimized to work in O(1) by keeping an extra pointer to tail of linked list.

## Add Function in a Ordered List
```python
def add(self, item):
    current = self.head
    previous = None
    stop = False

    while current != None and not stop:
        if current.get_data() > item:
            stop = True
        else:
            previous = current
            current = current.get_next()
    
    temp = Node(item)
    if previous == None:
        temp.set_next(self.head)
        self.head = temp
    else:
        temp.set_next(current)
        previous.set_next(temp)
```

# Delete

## Delete by Searching Key
```python
# Given a reference to the head of a list and a key,  
# delete the first occurence of key in linked list  
def deleteNode(self, key):  
        
    # Store head node  
    temp = self.head  

    # If head node itself holds the key to be deleted  
    if (temp is not None):  
        if (temp.data == key):  
            self.head = temp.next
            temp = None ## this step delete the first node
            return

    # Search for the key to be deleted, keep track of the  
    # previous node as we need to change 'prev.next'  
    while(temp is not None):  
        if temp.data == key:  
            break
        prev = temp  
        temp = temp.next

    # if key was not present in linked list  
    if(temp == None):  
        return

    # Unlink the node from linked list  
    prev.next = temp.next
    temp = None
```

## Delete at Certain Position
```python
# Given a reference to the head of a list  
# and a position, delete the node at a given position 
def deleteNode(self, position): 

    # If linked list is empty 
    if self.head == None: 
        return 

    # Store head node 
    temp = self.head 

    # If head needs to be removed 
    if position == 0: 
        self.head = temp.next
        temp = None
        return 

    # Find previous node of the node to be deleted 
    for i in range(position -1 ): 
        temp = temp.next
        if temp is None: 
            break

    # If position is more than number of nodes 
    if temp is None: 
        return 
    if temp.next is None: 
        return 

    # Node temp.next is the node to be deleted 
    # store pointer to the next of node to be deleted 
    next = temp.next.next

    # Unlink the node from linked list 
    temp.next = None

    temp.next = next 
```
## Delete All
```python
def deleteList(self): 
          
    # initialize the current node 
    current = self.head 
    while current: 
        prev = current.next # move next node 
            
        # delete the current node 
        del current.data 
            
        # set current equals prev node 
        current = prev 
```